package capturawebcam;

import Jama.Matrix;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import static org.opencv.highgui.Highgui.*;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;


public class Central1 extends javax.swing.JFrame {
 //************* Constantes y datos necesarios para el manejo de la camara**************
    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    public static boolean clickFlag = false;
    public static boolean calibrated = false;
    public static int xpoint, ypoint;
    VideoCapture camera = new VideoCapture(0);          //El numero indica que dispositivo del PC (camara) debe ser usada por el prog. En gral la camara USB es el 1
    Mat fotoComun = new Mat();
    Mat fotoGris = new Mat();
    Mat fotoBinaria = new Mat();
    BufferedImage img, img2;
    static int f = 640;
    static int c = 480;
    static int sumax = 0;
    static int sumay = 0;
    static int cont = 0;
    static double[] centro = new double[2]; //centro esta en centimetros
    int id =0;
    boolean encendido = false;
    boolean stop = false;
    /**
     * ******************************UMBRAL*****************************
     */
    static double umbral = 200;
    /**
     * ************DATOS DE ROBOTS EN EXPERIMENTO*************
     */
    double   Ka=5, ne=0.5, D0=0.30;     //  Ka:cte de atraccion, ne:cte repulsion; D0:distancia de repulsion
    double   CX12=-0.40, CY12=-0.30, CX31=0.80, CY31=0, CX23=-0.40, CY23=0.30; //CX y CY distancias relativas entre los robots
     double k = 5, o =-0.01, pp1=2;     //k,o valores dentro de matriz
    Robot [] BotList; 
    int iRobotN = 2;                    //Numero de robots en el experimento
    final static double L = 0.93;       //Longitud entre las ruedas del robot en metros
    final static double r = 0.215;      //radio de las ruedas de los robots en metros
    static int velMax = 80;
    static int w_max = 80;              //Valor maximo de velocidad de rueda
    static int w_min = -80;             //Valor minimo de velocidad de rueda
    //final static int Tolerancia_zona_muerta=2;
    boolean Habilitar_lego = true;      //true se conecta con lego
    boolean visualizar_video = true;    // Muestra el video del robot con subventanas y datos
    static int no_filas = 640;
    
    
     
    /**
     * ************************VALORES A
     * CALIBRAR*******************************8
     */
    static double factor =0.00254;// 1.49 / 640;  //149 cm equivalen a 640 pixeles///
    // el valor introducido corresponde a las condiciones particulares de nuestro experimento, 
    //se sugiere volver a calibrar e introducir el valor obtenido
    
    static int long_ventana = (int) (0.05 / factor);//
    //int long_marca=100;
    static String str;

    //static double th_anterior,th_actual,th_final=0;
    //static double nOfRev_anterior,nOfRev=0;
    static double[] Postura = new double[4];////////////////////////////////////////iRobotN?
    static int centrox, centroy;
    static int contFotos;

    public Central1() {
        initComponents();
        centro[0] = factor * 320;
        centro[1] = factor * 240;
    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Umbral = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        NumRobots = new javax.swing.JTextField();
        Calibracion = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        Inicio = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        VelocMax = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Monitor = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Cerrar = new javax.swing.JButton();
        Restaurar = new javax.swing.JButton();
        Ayuda = new javax.swing.JButton();
        Actualizar = new javax.swing.JButton();
        SetPoint = new javax.swing.JButton();
        Ka1 = new javax.swing.JTextField();
        ne1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        D01 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        k1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        o1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        CX121 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        CY121 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        CX231 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        CY311 = new javax.swing.JTextField();
        CY231 = new javax.swing.JTextField();
        CX311 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        pp11 = new javax.swing.JTextField();
        apgado1 = new javax.swing.JButton();
        Parada = new javax.swing.JButton();
        Parada1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(153, 204, 255));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setMinimumSize(new java.awt.Dimension(640, 480));
        jPanel1.setPreferredSize(new java.awt.Dimension(640, 480));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        jLabel1.setText("Umbral:");

        Umbral.setText("200");

        jLabel2.setText("Numero de robots:");

        NumRobots.setText("3");
        NumRobots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumRobotsActionPerformed(evt);
            }
        });

        Calibracion.setText("Auto-Calibración");
        Calibracion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CalibracionMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Variables fijas:");

        Inicio.setBackground(new java.awt.Color(0, 153, 0));
        Inicio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Inicio.setText("Inicio");
        Inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InicioActionPerformed(evt);
            }
        });

        jLabel5.setText("Velocidad Max.");

        VelocMax.setText("80");
        VelocMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VelocMaxActionPerformed(evt);
            }
        });

        Monitor.setColumns(20);
        Monitor.setRows(5);
        jScrollPane1.setViewportView(Monitor);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Monitor:");

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel3.setBackground(new java.awt.Color(51, 51, 255));
        jLabel3.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        jLabel3.setText("Software para robots móviles");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Cerrar.setBackground(new java.awt.Color(51, 153, 255));
        Cerrar.setText("X");
        Cerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CerrarMouseClicked(evt);
            }
        });

        Restaurar.setBackground(new java.awt.Color(51, 153, 255));
        Restaurar.setText("[ ]");
        Restaurar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RestaurarMouseClicked(evt);
            }
        });
        Restaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaurarActionPerformed(evt);
            }
        });

        Ayuda.setBackground(new java.awt.Color(51, 153, 255));
        Ayuda.setText("?");

        Actualizar.setText("Actualizar variables");
        Actualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ActualizarMouseClicked(evt);
            }
        });

        SetPoint.setText("Set Point");
        SetPoint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SetPointMouseClicked(evt);
            }
        });

        Ka1.setText("5");
        Ka1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ka1ActionPerformed(evt);
            }
        });

        ne1.setText("0.5");
        ne1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ne1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Ka");

        jLabel8.setText("ne");

        D01.setText("0.30");
        D01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D01ActionPerformed(evt);
            }
        });

        jLabel9.setText("D0");

        k1.setText("5");
        k1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                k1ActionPerformed(evt);
            }
        });

        jLabel10.setText("k");

        o1.setText("-0.01");
        o1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o1ActionPerformed(evt);
            }
        });

        jLabel11.setText("o");

        CX121.setText("-0.40");
        CX121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CX121ActionPerformed(evt);
            }
        });

        jLabel12.setText("cx12");

        CY121.setText("-0.30");
        CY121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CY121ActionPerformed(evt);
            }
        });

        jLabel13.setText("cy12");

        CX231.setText("-0.40");
        CX231.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CX231ActionPerformed(evt);
            }
        });

        jLabel14.setText("cx23");

        jLabel15.setText("cx13");

        CY311.setText("0");
        CY311.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CY311ActionPerformed(evt);
            }
        });

        CY231.setText("0.30");
        CY231.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CY231ActionPerformed(evt);
            }
        });

        CX311.setText("0.80");
        CX311.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CX311ActionPerformed(evt);
            }
        });

        jLabel16.setText("cy13");

        jLabel17.setText("cy23");

        jLabel18.setText("cte");

        pp11.setText("2");
        pp11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pp11ActionPerformed(evt);
            }
        });

        apgado1.setBackground(new java.awt.Color(0, 153, 0));
        apgado1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        apgado1.setText("Reinicio");
        apgado1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apgado1ActionPerformed(evt);
            }
        });

        Parada.setBackground(new java.awt.Color(0, 153, 0));
        Parada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Parada.setText("Seguir");
        Parada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParadaActionPerformed(evt);
            }
        });

        Parada1.setBackground(new java.awt.Color(0, 153, 0));
        Parada1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Parada1.setText("Parar");
        Parada1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Parada1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(D01, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(k1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(o1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addGap(290, 290, 290)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(pp11, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CX121, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CY121, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CX231, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CY231, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CX311, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CY311, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Parada1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Parada, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addComponent(Inicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Umbral, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NumRobots, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(VelocMax, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Ka1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ne1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(SetPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Calibracion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)))
                            .addComponent(apgado1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Ayuda, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Restaurar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Cerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ayuda, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Restaurar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(D01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(k1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(o1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pp11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel18))))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CX121, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CY121, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CX231, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CY231, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CX311, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CY311, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Umbral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Actualizar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NumRobots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Calibracion))
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(VelocMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SetPoint))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Ka1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ne1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(9, 9, 9)
                        .addComponent(Inicio)
                        .addGap(28, 28, 28)
                        .addComponent(apgado1)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Parada)
                            .addComponent(Parada1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NumRobotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumRobotsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumRobotsActionPerformed

    private void CerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CerrarMouseClicked
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_CerrarMouseClicked

    private void RestaurarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RestaurarMouseClicked
        restaurarVentana();        // TODO add your handling code here:
    }//GEN-LAST:event_RestaurarMouseClicked

    private void RestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaurarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RestaurarActionPerformed

    private void InicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InicioActionPerformed
        hilo1 h1 = new hilo1();
        h1.start();
        
    }//GEN-LAST:event_InicioActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if (clickFlag) {
            clickFlag = false;
            xpoint = evt.getX();
            ypoint = evt.getY();
        }// TODO add your handling code here:
    }//GEN-LAST:event_jPanel1MouseClicked

    private void ActualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ActualizarMouseClicked
        Actualizacion();        // TODO add your handling code here:
    }//GEN-LAST:event_ActualizarMouseClicked

    private void CalibracionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CalibracionMouseClicked
        Graphics g = jPanel1.getGraphics();
        Calibracion h2 = new Calibracion();
        h2.start();
        if (calibrated) {
            h2.interrupt();
            //jPanel1.removeAll();
            //jPanel1.repaint();
            //super.paint(g);
        }
    }//GEN-LAST:event_CalibracionMouseClicked

    private void SetPointMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SetPointMouseClicked
        clickFlag = true;
        //Monitor.append("Haga click en el nuevo Set Point");
        centro[0] = factor * xpoint;
        centro[1] = factor * ypoint;
        clickFlag = false;

    }//GEN-LAST:event_SetPointMouseClicked

    private void Ka1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ka1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Ka1ActionPerformed

    private void ne1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ne1ActionPerformed
        // TODO add your handling cfode here:
    }//GEN-LAST:event_ne1ActionPerformed

    private void D01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D01ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_D01ActionPerformed

    private void k1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_k1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_k1ActionPerformed

    private void o1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_o1ActionPerformed

    private void CX121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CX121ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CX121ActionPerformed

    private void CY121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CY121ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CY121ActionPerformed

    private void CX231ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CX231ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CX231ActionPerformed

    private void CY311ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CY311ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CY311ActionPerformed

    private void CY231ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CY231ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CY231ActionPerformed

    private void CX311ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CX311ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CX311ActionPerformed

    private void pp11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pp11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pp11ActionPerformed

    private void VelocMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VelocMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VelocMaxActionPerformed

    private void apgado1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apgado1ActionPerformed
         //TODO add your handling code here:
         encendido=false;
        
    }//GEN-LAST:event_apgado1ActionPerformed

    private void ParadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParadaActionPerformed
        // TODO your handling code here:
        
         stop = false;
    }//GEN-LAST:event_ParadaActionPerformed

    private void Parada1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Parada1ActionPerformed
        // TODO add your handling code here:
        stop=true;
    }//GEN-LAST:event_Parada1ActionPerformed
    public class hilo1 extends Thread {

        long t0, t;
        int x;

        Robot[] BotList = new Robot[iRobotN];
        
      

        @Override
        public void run() {
           
            
           
           
            MCmensaje msg = null;
            for (x = 0; x < iRobotN; x++) {
                BotList[x] = new Robot();
            }
            
              
            //Cargo la id de cada robot
             for (x = 0; x < iRobotN; x++) {
                            
                 BotList[x].id=x;
                             
             }
             
            try {
                msg = new MCmensaje();
            } catch (IOException ex) {
                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                
            }
            
             while (true) {
                 
                 /*Envio velocidades 0 a cada robot para pararlos si estan andando: */
                        if (Habilitar_lego) {
                            str = "";
                            for (x = 0; x <iRobotN ; x++) {
                                //msg.Enviar_Mensaje();
                                str = str + "id";
                                str = str + Integer.toString(x + 1);
                                str = str + ",";
                                BotList[x].wd=0;
                                str = str + Integer.toString((int) BotList[x].wd);
                                str = str + ",";
                                BotList[x].wi=0;
                                str = str + Integer.toString((int) BotList[x].wi);
                                str = str + ","+"\r";
                            }
                            
                        
                            System.out.println(str);
                            try {
                                msg.sendMsg(str);
                            } catch (IOException ex) {
                                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                Thread.sleep(1);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }  
                        
                 
                 
                 if(encendido==false) {
                    System.out.println("Sistema en reinicio");
                    encendido=true;
                 }
            
            
              while (encendido) {
                
               
            
                if (!camera.isOpened()) {
                    System.out.println("Error");
                } else {
                    camera.set(CV_CAP_PROP_FRAME_WIDTH, 640);
                    camera.set(CV_CAP_PROP_FRAME_HEIGHT, 480);
                    for (x = 0; x < iRobotN; x++) {
                        Obtener_Posicion_inicial(BotList[x]);
                    }
                    if (iRobotN > 1) {
                        try {
                            Reconocimiento(BotList);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    t0 = System.currentTimeMillis();
                    /*try 
                {
                    msg.Iniciar_Comunicacion();
                    } catch (IOException ex) {
                    Logger.getLogger(Central.class.getName()).log(Level.SEVERE, null, ex);
                }*/
                    while (encendido) {
                        
                        while (stop) {
                    System.out.println("Sistema parado....");
                
                        /*Envio velocidades 0 a cada robot para paralos si estan andando: */
                        if (Habilitar_lego) {
                            str = "";
                            for (x = 0; x <iRobotN ; x++) {
                                //msg.Enviar_Mensaje();
                                str = str + "id";
                                str = str + Integer.toString(x + 1);
                                str = str + ",";
                                BotList[x].wd=0;
                                str = str + Integer.toString((int) BotList[x].wd);
                                str = str + ",";
                                BotList[x].wi=0;
                                str = str + Integer.toString((int) BotList[x].wi);
                                str = str + ",";
                            }
                            
                        
                            System.out.println(str);
                            try {
                                msg.sendMsg(str);
                            } catch (IOException ex) {
                                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                Thread.sleep(1);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }  
                        
                        
                        
                    }      
                        
                      
                        for (x = 0; x < iRobotN; x++) {
                            Obtener_Posicion(BotList[x]);
                            BotList[x].Posicion_pixel_anterior = BotList[x].Posicion_pixel;
                        }
                        for (x = 0; x < iRobotN; x++) {
                            Obtener_Postura(BotList[x]);
                            BotList[x].th_anterior = BotList[x].th_actual;
                            BotList[x].nOfRev_anterior = BotList[x].nOfRev;
                        }
                        CalcPotenciales(BotList);
                        
//                     System.out.println(factor*BotList[0].Posicion_actual[0] +"," + factor*BotList[0].Posicion_actual[1]+","+factor*BotList[1].Posicion_actual[0] +"," + factor*BotList[1].Posicion_actual[1]+","+factor*BotList[2].Posicion_actual[0] +"," + factor*BotList[2].Posicion_actual[1]);
                        
                        for (x = 0; x < iRobotN; x++) {
                            
                             
                            
                             t = System.currentTimeMillis() - t0;
                            Control_Posicion(t, BotList[x]);
                        }
                        /*Envio datos a robot: */
                        if (Habilitar_lego) {
                            str = "";
                            for (x = 0; x <iRobotN ; x++) {
                                //msg.Enviar_Mensaje();
                                str = str + "id";
                                str = str + Integer.toString(x + 1);
                                str = str + "f";
                                str = str + Integer.toString((int) BotList[x].Posicion_actual[2]);
                                str = str + ",";
                                str = str + Integer.toString((int) BotList[x].Posicion_actual[3]);
                                str = str + ";c";
                                str = str + Integer.toString((int)BotList[x].Posicion_actual[0]);
                                str = str + ",";
                                str = str + Integer.toString((int) BotList[x].Posicion_actual[1]);
                                str = str + ";";
                                str = str + "\r";
                            }
                            
                        
                            //System.out.println(str);
                            try {
                                msg.sendMsg(str);
                            } catch (IOException ex) {
                                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                Thread.sleep(1);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
        

        }
        }
        public void finalizar() {
            camera.release();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Central1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Central1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Central1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Central1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Central1().setVisible(true);
            }
        });
    }

    public static BufferedImage mat2Img(Mat in) {
        BufferedImage out;
        byte[] data = new byte[640 * 480 * (int) in.elemSize()];
        int type;
        in.get(0, 0, data);

        if (in.channels() == 1) {
            type = BufferedImage.TYPE_BYTE_GRAY;
        } else {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }

        out = new BufferedImage(640, 480, type);

        out.getRaster().setDataElements(0, 0, 640, 480, data);
        return out;
    }

    public void Obtener_Posicion(Robot bot1) {
        int i = 0;
        int j = 0;
        clickFlag = true;
        bot1.Posicion_actual = bot1.Posicion_pixel_anterior;////si no funciona el problema debe estar aca
        bot1.Posicion_pixel = bot1.Posicion_pixel_anterior;
        Graphics g = jPanel1.getGraphics();
        if (camera.read(fotoComun)) {
            Imgproc.cvtColor(fotoComun, fotoGris, Imgproc.COLOR_RGB2GRAY);
            Imgproc.threshold(fotoGris, fotoBinaria, umbral, 255, Imgproc.THRESH_TOZERO);
            img = mat2Img(fotoBinaria);
            contFotos = contFotos + 1;
            for (int h = 0; h < 4; h = h + 2) {
                centrox = (bot1.Posicion_pixel_anterior[h]);
                centroy = (bot1.Posicion_pixel_anterior[h + 1]);
                cont = sumax = sumay = 0;
                for (i = (int) (centrox - long_ventana / 2); i <= (int) (centrox + long_ventana / 2); i++) {
                    for (j = (int) (centroy - long_ventana / 2); j <= (int) (centroy + long_ventana / 2); j++) {
                        if ((img.getRGB(i, j) & 0xff) > umbral)//solo miro color azul del RGB (revisar mejores opciones)
                        {
                            sumax = sumax + i;
                            sumay = sumay + j;
                            cont = cont + 1;
                        }
                    }
                }
                Monitor.removeAll();
                if (cont > 0) {
                    centrox = (int) (sumax / cont);
                    centroy = (int) (sumay / cont);
                    bot1.Posicion_actual[h] = centrox;
                    bot1.Posicion_actual[h + 1] = no_filas - centroy;
                    bot1.Posicion_pixel[h] = centrox;
                    bot1.Posicion_pixel[h + 1] = centroy;
                    img.setRGB(centrox, centroy, 0);
                } else {
                    System.out.println("Marca perdida");
                }
            }
            if (visualizar_video) {
                int h = 0;
                //for (int h=0;h<4*iRobotN;h=h+2)
                //{
                g.drawImage(img, 0, 0, 640, 480, 0, 0, 640, 480, null);
                g.setColor(Color.yellow);
                g.drawRect(bot1.Posicion_pixel[h] - (long_ventana / 2), bot1.Posicion_pixel[h + 1] - (long_ventana / 2), long_ventana, long_ventana);
                g.setColor(Color.yellow);
                g.drawRect(bot1.Posicion_pixel[h + 2] - (long_ventana / 2), bot1.Posicion_pixel[h + 3] - (long_ventana / 2), long_ventana, long_ventana);
                // }
            }
        }
    }

    public void Obtener_Postura(Robot bot) {
        int j;
        double xx, yy, pp, qq;
        for (j = 0; j < 4; j = j + 4) {
            Postura[0] = (factor * bot.Posicion_actual[j]);
            Postura[1] = (factor * bot.Posicion_actual[j + 1]);
            bot.Alpha[0] = Postura[2] = (factor * bot.Posicion_actual[j + 2]);
            bot.Alpha[1] = Postura[3] = (factor * bot.Posicion_actual[j + 3]);
            xx = Postura[0];
            yy = Postura[1];
            pp = Postura[2];
            qq = Postura[3];

            bot.th_actual = Math.atan2(qq - yy, pp - xx);

            if (bot.th_actual < 0) {
                bot.th_actual = bot.th_actual + 2 * Math.PI;
            }
            bot.nOfRev = bot.nOfRev_anterior;
            if (bot.th_anterior - bot.th_actual > 1.9 * Math.PI) {
                bot.nOfRev = bot.nOfRev_anterior + 1;
            }
            if (bot.th_anterior - bot.th_actual < -1.9 * Math.PI) {
                bot.nOfRev = bot.nOfRev_anterior - 1;
            }
            bot.th_final = bot.th_actual + (bot.nOfRev * 2 * Math.PI);
        }
    }

    public void Actualizacion() {
        umbral = Double.parseDouble(Umbral.getText());
        iRobotN = Integer.parseInt(NumRobots.getText());
        velMax = Integer.parseInt(VelocMax.getText());
        Ka= Double.parseDouble(Ka1.getText());
        ne= Double.parseDouble(ne1.getText());
        D0= Double.parseDouble(D01.getText());
        k= Double.parseDouble(k1.getText());
        o= Double.parseDouble(o1.getText());
        CX12= Double.parseDouble(CX121.getText());
        CY12= Double.parseDouble(CY121.getText());
        CX23= Double.parseDouble(CX231.getText());
        CY23= Double.parseDouble(CY231.getText());
        CX31= Double.parseDouble(CX311.getText());
        CY31= Double.parseDouble(CY311.getText());
        pp1= Double.parseDouble(pp11.getText());
        w_max = velMax;
        w_min = -velMax;
    }

    public void Obtener_Posicion_inicial(Robot bot) {
        Graphics g = jPanel1.getGraphics();
        Monitor.removeAll();
        if (camera.read(fotoComun))//////Para obtener la posicion inicial
        {
            ///Imgproc.cvtColor(fotoComun, fotoGris, Imgproc.COLOR_RGB2GRAY);
            ///Imgproc.threshold(fotoGris, fotoBinaria,umbral,255,Imgproc.THRESH_TOZERO);
            img = mat2Img(fotoComun);
            g.drawImage(img, 0, 0, 640, 480, 0, 0, 640, 480, null);
            for (int k = 0; k < 4; k = k + 4)//indico la posicion inicial de cada robot
            {
                clickFlag = true;
                Monitor.append("Haga click en \nla posicion central del robot\nEsperando...");
                while (clickFlag) {
                    System.out.println("esperando...");
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                }
                bot.Posicion_pixel_anterior[k] = xpoint;
                bot.Posicion_pixel_anterior[k + 1] = ypoint;
                xpoint = ypoint = 0;
                Monitor.append(String.valueOf("\n" + bot.Posicion_pixel_anterior[0]) + "," + String.valueOf(bot.Posicion_pixel_anterior[1]));
                clickFlag = true;
                Monitor.append("\nAhora haga click en \nla posicion frontal del robot\nEsperando...");
                while (clickFlag) {
                    System.out.println("esperando...");
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                }
                bot.Posicion_pixel_anterior[k + 2] = xpoint;
                bot.Posicion_pixel_anterior[k + 3] = ypoint;
                Monitor.append(String.valueOf("\n" + bot.Posicion_pixel_anterior[2]) + "," + String.valueOf(bot.Posicion_pixel_anterior[3]));
            }
            Monitor.append("\nListo!");
        }
    }

    public void Control_Posicion(long t, Robot bot) {
        double l = 0.10;//distancia entre los dos puntos del robot, en metros
        double aux;
        Graphics g = jPanel1.getGraphics();
        double n = 5;
        double eps = 0.001;
        double V, W, WD, WI,Vx,Vy,Vec_V,Phi,Vr,Wr;
        double k = 5;
        double o =-0.01;
        double[] deseado = new double[2];   
       
        g.setColor(Color.red);
        g.drawOval((int) (centro[0] / factor), (int) (centro[1] / factor), 6, 6);

// **************************************** Matrices nuestras *********************************************
      

// funcion e en matlab
      
      deseado[0]= bot.Fx;
      deseado[1]= bot.Fy;
                             

    
    // System.out.println("fuerzas " + bot.id + " Fx " + bot.Fx +" Fy "+ bot.Fy);
                             
      
   double[][] array1 = {{deseado[0]}, {deseado[1]}};
   Matrix error = new Matrix(array1);   

  //System.out.println("error  "+ bot.id +  "  x " +error.get(0,0) + " y " + error.get(1, 0));

// funcion e_punto en matlab

double[][] K_aux = {{-k,o}, {-o,-k}};
Matrix K = new Matrix(K_aux); 
Matrix f2 = K.times(error); // time multiplica la matriz k por error
// resultado de f2 es [dxp ,dyp]


   
//Normalizando ley de control:
  aux = n/Math.sqrt((f2.get(0, 0) * f2.get(0, 0)) + (f2.get(1, 0) * f2.get(1, 0)) + eps);
  Matrix f4 = f2.times(aux);                  //Matriz normalizada


// funciones de Ricardo

 double[][] array7 = {{(Math.cos(bot.th_final)), (Math.sin(bot.th_final))}, {-(1 / l) * (Math.sin(bot.th_final)), (1 / l) * (Math.cos(bot.th_final))}};
        Matrix Ainv = new Matrix(array7); 
        
        Matrix VW = new Matrix(2, 1);
        VW = Ainv.times(f4);                        //multiplico Ainv por la matriz normalizada
        Vr = VW.get(0, 0);
        Wr = VW.get(1, 0);
        
    // System.out.println("Veloc_crudas  "+ Vr+" Vw  "+ Wr);  
 
        Vr = -Vr*pp1;       //factor de ajuste en pantalla
        Wr = Wr*0.2*pp1; 

 
 
// System.out.println("Veloc_con constantes  "+ Vr+" Vw  "+ Wr); 

//********************************************************************************************************
            //Zona muerta:
            if (Math.abs((error).get(0, 0)) < 0.05 && Math.abs((error).get(1, 0)) < 0.05) {
               
                Vr=0.1;
                Wr=0.1;
            } 
        
//Velocidades angulares adaptadas a lego
        bot.wd = -Math.round((Vr / r) - (Wr * (L / (2 * r)))); 
        bot.wi = -Math.round((Vr / r) + (Wr * (L / (2 * r))));
        
        //System.out.println("vec_V " + (Vr / r) + " W " + (Wr * (L / (2 * r))));
        //System.out.println("veloc_sin_tope " + bot.wd + " " + bot.wi);
        //Acotando a la escala de velocidad de lego
//limite superior       
        if (bot.wd >= w_max) {
            bot.wd = w_max;
        } 
//limite inferior
        if (bot.wd < w_min) {
            bot.wd = w_min;
        } 
//limite superior
        if (bot.wi >= w_max) {
            bot.wi = w_max;
        } 
//limite inferior   
        if (bot.wi < w_min) {
            bot.wi = w_min;
        } 
        //System.out.println("veloc "+bot.id+ bot.wd + "" + bot.wi);
    }
//*****RUTINA DE CALIBRACION*******
    public class Calibracion extends Thread {

        int[] aux = new int[4];

        @Override
        public void run() {
            Monitor.removeAll();
            Monitor.append("Entrando a modo calibracion...");
            Graphics g = jPanel1.getGraphics();
            if (camera.read(fotoComun)) {
                img = mat2Img(fotoComun);
                g.drawImage(img, 0, 0, 640, 480, 0, 0, 640, 480, null);
                clickFlag = true;
                Monitor.append("\nColoque un robot y haga click en\nuno de sus puntos\nEsperando...");
                while (clickFlag) {
                    System.out.println("esperando...");
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                }
                aux[0] = xpoint;
                aux[1] = ypoint;
                xpoint = ypoint = 0;
                clickFlag = true;
                Monitor.append("\nAhora haga click en \nel otro punto\nEsperando...");
                while (clickFlag) {
                    System.out.println("esperando...");
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
                }
                aux[2] = xpoint;
                aux[3] = ypoint;
                factor = 0.1 / (Math.sqrt(Math.pow((aux[2] - aux[0]), 2) + Math.pow((aux[3] - aux[1]), 2)));
                Monitor.append("\nCalculando factor = " + factor);
                Monitor.append("\nListo!");
                centro[0] = factor * 320;
                centro[1] = factor * 240;
                calibrated = true;
            }
        }
    }

    public void Reconocimiento(Robot[] bot) throws InterruptedException {
        int aux1, aux2;
        int j = 0;
        for (int y = 0; y < iRobotN; y++) {
            System.out.println("Reconociendo robot" + bot[y].id);
            for ( int x = 1; x <=iRobotN; x++) {

                Obtener_Posicion(bot[y]);
                aux1 = bot[y].Posicion_pixel[0];
                aux2 = bot[y].Posicion_pixel[1];
                System.out.println("Posicion inicial:" + aux1 + " " + aux2);
                sendMove(Integer.toString(x));
                while (j < 30) {
                    Obtener_Posicion(bot[y]);
                    j++;
                }
                //Thread.sleep(750);
                Obtener_Posicion(bot[0]);// esto esta raro
                System.out.println("Posicion final:" + bot[y].Posicion_pixel[0] + " " + bot[y].Posicion_pixel[1]);
                if ((bot[y].Posicion_pixel[0] != aux1) || (bot[y].Posicion_pixel[1] != aux2)) {
                   bot[y].id = y;
                    System.out.println("Robot" + y + "encontrado");
//                    cont++;
                }
                Thread.sleep(1000);
            }
        }
        
    }
//*******ENVIO DE MENSAJE*********************
    public void sendMove(String id) {
        MCmensaje Asociation = null;
        try {
            Asociation = new MCmensaje();
        } catch (SocketException ex) {
            Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Asociation.sendMCmove(id);
        } catch (IOException ex) {
            Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Central1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
//***************CALCULO DE POTENCIALES******************************
    public void CalcPotenciales(Robot [] bot){
        double [] xp = new double [3];
        double [] yp = new double [3];
      
       for (int i = 0; i<2; i++) {
                xp[i] = bot[i].Posicion_actual[0]*factor;   //obtencion de posiciones del cada robot detectado
                yp[i] = bot[i].Posicion_actual[1]*factor; 
       }
       //Distancias relativas entre robots 
       double D12=Math.sqrt((xp[0]-xp[1])*(xp[0]-xp[1])+(yp[0]-yp[1])*(yp[0]-yp[1]));  
//       double D13= Math.sqrt((xp[0]-xp[2])*(xp[0]-xp[2])+(yp[0]-yp[2])*(yp[0]-yp[2]));
//       double D23= Math.sqrt((xp[1]-xp[2])*(xp[1]-xp[2])+(yp[1]-yp[2])*(yp[1]-yp[2]));
      
       // System.out.println("Distancia 1 al 2  " + D12 );
       // System.out.println("Distancia 1 al 3  " + D13 );
       // System.out.println("Distancia 2 al 3  " + D23 );
        
        
//  if (D13<=D0 || D12<=D0) { 
// Fuerzas potenciales sobre el bot 1 dentro del area de repulsion con los bots 2 y 3
//   +].Fx = -Ka*(xp[0]-xp[2]-CX31) -Ka*(xp[0]-xp[1]+CX12)+ne* (Math.abs(1/D13-1/D0)*(xp[0]-xp[2]))/(D13*D13*D13)+ne* (Math.abs(1/D12-1/D0)*(xp[0]-xp[1]))/(D12*D12*D12);
//   bot[0].Fy =-Ka*(yp[0]-yp[2]-CY31)-Ka*(yp[0]-yp[1]+CY12)+ne* (Math.abs(1/D13-1/D0)*(yp[0]-yp[2]))/(D13*D13*D13)+ne* (Math.abs(1/D12-1/D0)*(yp[0]-yp[1]))/(D12*D12*D12);
//
//  } else{
// Fuerzas potenciales sobre el bot 1 fuera del area de repulsion con los bots 2 y 3
//     bot[0].Fx = -Ka*(xp[0]-xp[2]-CX31)-Ka*(xp[0]-xp[1]+CX12);
//     bot[0].Fy=-Ka*(yp[0]-yp[2]-CY31)-Ka*(yp[0]-yp[1]+CY12);
//  }     
//  
//  if (D12<=D0|| D23<=D0){
// Fuerzas potenciales sobre el bot 2 dentro del area de repulsion con los bots 1 y 3  
// bot[1].Fx =-Ka*(xp[1]-xp[0]-CX12) -2*Ka*(xp[1]-centro[0])+  ne* (Math.abs(1/D12-1/D0)*(xp[1]-xp[0]))/(D12*D12*D12)+ ne* (Math.abs(1/D23-1/D0)*(xp[1]-xp[2]))/(D23*D23*D23);
// bot[1].Fy =-Ka*(yp[1]-yp[0]-CY12)-2*Ka*(yp[1]-centro[1])+ ne* (Math.abs(1/D12-1/D0)*(yp[1]-yp[0]))/(D12*D12*D12)+ne* (Math.abs(1/D23-1/D0)*(yp[1]-yp[2]))/(D23*D23*D23);
//  
//}else{
// Fuerzas potenciales sobre el bot 2 fuera del area de repulsion con los bots 2 y 3     
//   bot[1].Fx=-Ka*(xp[1]-xp[0]-CX12)-2*Ka*(xp[1]-centro[0]);
//   bot[1].Fy=-Ka*(yp[1]-yp[0]-CY12) -2*Ka*(yp[1]-centro[1]);
//} 
//
//if  (D23<=D0 || D13<=D0) {
// Fuerzas potenciales sobre el bot 3 dentro del area de repulsion con los bots 2 y 1  
//  bot[2].Fx =-Ka*(xp[2]-xp[1]-CX23)/* -Ka*(xp[2]-xp[0]+CX31)*/ +  ne* (Math.abs(1/D23-1/D0)*(xp[2]-xp[1]))/(D23*D23*D23)+ne* (Math.abs(1/D13-1/D0)*(xp[2]-xp[0]))/(D13*D13*D13);
//  bot[2].Fy =-Ka*(yp[2]-yp[1]-CY23)/*-Ka*(yp[2]-yp[0]+CY31)*/+ ne* (Math.abs(1/D23-1/D0)*(yp[2]-yp[1]))/(D23*D23*D23)+ne* (Math.abs(1/D13-1/D0)*(yp[2]-yp[0]))/(D13*D13*D13);
//  
//}else{
// Fuerzas potenciales sobre el bot 3 fuera del area de repulsion con los bots 2 y 1    
// bot[2].Fx =-Ka*(xp[2]-xp[1]-CX23);//-Ka*(xp[2]-xp[0]+CX31);
// bot[2].Fy =-Ka*(yp[2]-yp[1]-CY23);//-Ka*(yp[2]-yp[0]+CY31);
// 
//  
//
//}
}
// ***** RUTINA DE ACTUALIZACION DE PANTALLA *****//
    private void restaurarVentana() {
        if (getExtendedState() == Central1.MAXIMIZED_BOTH) {//1
            setExtendedState(Central1.NORMAL);//2
        } else {
            setExtendedState(Central1.MAXIMIZED_BOTH);//3
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JButton Ayuda;
    private javax.swing.JTextField CX121;
    private javax.swing.JTextField CX231;
    private javax.swing.JTextField CX311;
    private javax.swing.JTextField CY121;
    private javax.swing.JTextField CY231;
    private javax.swing.JTextField CY311;
    private javax.swing.JButton Calibracion;
    private javax.swing.JButton Cerrar;
    private javax.swing.JTextField D01;
    private javax.swing.JButton Inicio;
    private javax.swing.JTextField Ka1;
    private javax.swing.JTextArea Monitor;
    private javax.swing.JTextField NumRobots;
    private javax.swing.JButton Parada;
    private javax.swing.JButton Parada1;
    private javax.swing.JButton Restaurar;
    private javax.swing.JButton SetPoint;
    private javax.swing.JTextField Umbral;
    private javax.swing.JTextField VelocMax;
    private javax.swing.JButton apgado1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField k1;
    private javax.swing.JTextField ne1;
    private javax.swing.JTextField o1;
    private javax.swing.JTextField pp11;
    // End of variables declaration//GEN-END:variables
}
